syntax = "proto3";

package bc.rover;

import "core.proto";

service Rover {
    // Sends a greeting
    rpc Join (RoverIdent) returns (stream RoverMessage) {}

    // Rovers sends block collected from the respective network
    rpc CollectBlock (stream core.Block) returns (core.Null) {}

    // Rover reports back sync status
    rpc ReportSyncStatus (RoverSyncStatus) returns (core.Null) {}

    // Rover submits block range
    rpc ReportBlockRange (RoverMessage.RoverBlockRange) returns (core.Null) {}

    // Check is TX reciveved in rover is watched and before settlement height
    rpc IsBeforeSettleHeight(SettleTxCheckReq) returns (SettleTxCheckResponse) {}

    // check if any marked txs have been queued
    rpc GetQueuedMarkedTxs(MarkedTxsReq) returns (QueuedMarkedTxsResponse) {}
}

message RoverIdent {
    string rover_name = 1;
}

message RoverSyncStatus {
    string rover_name = 1;
    bool status = 2;
}

enum RoverMessageType {
    FetchBlock = 0;
    RequestResync = 1;
    rover_block_range = 2;
    LatestBlock = 3;
}

message RoverMessage {
    RoverMessageType type = 1;
    oneof payload {
        Resync resync = 2;
        FetchBlock fetch_block = 3;
        RoverBlockRange rover_block_range = 4;
        LatestBlock latest_block = 5;
    }

    message FetchBlock {
        core.Block from_block = 1;
        core.Block to_block = 2;
    }

    message LatestBlock {
        string rover_name = 1;
        core.Block block = 2;
    }

    message RoverBlockRange {
        string rover_name = 1;
        uint64 highest_height = 2;
        uint64 lowest_height = 3;
        string highest_hash = 4;
        string lowest_hash = 5;
        string synced = 6;
    }

    message Resync {
        message Interval {
            core.Block from_block = 1;
            core.Block to_block = 2;
        }
        // latest know block we have in storage, can be empty
        core.Block latest_block = 1;
        repeated Interval intervals = 2;
    }
}


message SettleTxCheckReq {
  message PossibleTransaction {
    string addr_to = 1;
    string addr_from = 2;
    bytes value = 3;
    string bridged_chain = 4;
    string tx_id = 5;
    uint64 block_height = 6;
    string token_type = 7;
  }
  repeated PossibleTransaction possible_transactions = 1;
  string block_hash = 2;
  string bridged_chain = 3;
}

message SettleTxCheckResponse {
  repeated core.MarkedTransaction marked_transactions = 1;
}

message MarkedTxsReq {
  repeated core.MarkedTransaction marked_transactions = 1;
  string block_hash = 2;
  string blockchain = 3;
}

message QueuedMarkedTxsResponse {
  repeated core.MarkedTransaction marked_transactions = 1;
  string block_hash = 2;
}
